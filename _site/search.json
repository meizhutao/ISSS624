[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/chap01/Hands-on_Ex1_a.html",
    "href": "Hands-on_Exercise/Hands-on_Ex1/chap01/Hands-on_Ex1_a.html",
    "title": "Hands-on Exercise 1:Geospatial Data Wrangling with R",
    "section": "",
    "text": "This is Geospatial Data Wrangling with R.\nGetting Started\nThe code chunk below will install and load tidyverse and sf packages.\n\npacman::p_load(sf,tidyverse)\n\nImporting Geospatial Data\nImporting polygon features\nThis code chunk wil import ESPI shapefile into R.\n\nmpsz <- st_read(dsn = \"data/geospatial/\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\meizhutao\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\chap01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting polyline feature data in shapefile form.\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\meizhutao\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\chap01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImporting GIS data in kml format.\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\meizhutao\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\chap01\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\nWorking with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nWorking with head()\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nPlotting the Geospatial Data\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\nWorking with Projection\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTransforming the projection of preschool from wgs84 to svy21.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\nImporting and Converting An Aspatial Data Importing the aspatial data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 6893 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (25): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (37): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (8): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(listings) \n\n[[1]]\n# A tibble: 6,893 × 75\n      id listi…¹ scrap…² last_scr…³ source name  descr…⁴ neigh…⁵ pictu…⁶ host_id\n   <dbl> <chr>     <dbl> <date>     <chr>  <chr> <chr>   <chr>   <chr>     <dbl>\n 1  2818 https:… 2.02e13 2022-09-07 city … Quie… \"Quiet… \"Indis… https:…    3159\n 2 20168 https:… 2.02e13 2022-09-07 previ… Stud… \"17th … \"Locat… https:…   59484\n 3 27886 https:… 2.02e13 2022-09-07 city … Roma… \"Styli… \"Centr… https:…   97647\n 4 28871 https:… 2.02e13 2022-09-07 city … Comf… \"<b>Th… \"Flowe… https:…  124245\n 5 29051 https:… 2.02e13 2022-09-07 city … Comf… \"This … \"the s… https:…  124245\n 6 44391 https:… 2.02e13 2022-09-07 previ… Quie… \"Guest… \"The a… https:…  194779\n 7 49552 https:… 2.02e13 2022-09-07 city … Mult… \"Styli… \"You w… https:…  225987\n 8 50523 https:… 2.02e13 2022-09-07 city … B & … \"B & B…  <NA>   https:…  231946\n 9 55709 https:… 2.02e13 2022-09-07 previ… Brig… \"<b>Th… \"The a… https:…  263233\n10 55868 https:… 2.02e13 2022-09-07 city … Apar… \"All g… \"Our n… https:…  264178\n# … with 6,883 more rows, 65 more variables: host_url <chr>, host_name <chr>,\n#   host_since <date>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <lgl>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <dbl>, host_total_listings_count <dbl>,\n#   host_verifications <chr>, host_has_profile_pic <lgl>, …\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\nglimpse(listings_sf)\n\nRows: 6,893\nColumns: 74\n$ id                                           <dbl> 2818, 20168, 27886, 28871…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022091e+13, 2.022091e+1…\n$ last_scraped                                 <date> 2022-09-07, 2022-09-07, …\n$ source                                       <chr> \"city scrape\", \"previous …\n$ name                                         <chr> \"Quiet Garden View Room &…\n$ description                                  <chr> \"Quiet Garden View Room &…\n$ neighborhood_overview                        <chr> \"Indische Buurt (\\\"Indies…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 3159, 59484, 97647, 12424…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Daniel\", \"Alexander\", \"F…\n$ host_since                                   <date> 2008-09-24, 2009-12-02, …\n$ host_location                                <chr> \"Amsterdam, Netherlands\",…\n$ host_about                                   <chr> \"Upon arriving in Amsterd…\n$ host_response_time                           <chr> \"within an hour\", \"within…\n$ host_response_rate                           <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         <chr> \"100%\", \"98%\", \"100%\", \"1…\n$ host_is_superhost                            <lgl> TRUE, FALSE, FALSE, TRUE,…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Indische Buurt\", \"Gracht…\n$ host_listings_count                          <dbl> 1, 5, 1, 2, 2, 1, 1, 1, 2…\n$ host_total_listings_count                    <dbl> 1, 5, 1, 2, 2, 1, 2, 2, 4…\n$ host_verifications                           <chr> \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> \"Amsterdam, North Holland…\n$ neighbourhood_cleansed                       <chr> \"Oostelijk Havengebied - …\n$ neighbourhood_group_cleansed                 <lgl> NA, NA, NA, NA, NA, NA, N…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 2, 2, 2, 2, 1, 4, 3, 2, 2…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1.5 shared baths\", \"1 pr…\n$ bedrooms                                     <dbl> 1, 1, 1, 1, 1, 2, 2, 1, 1…\n$ beds                                         <dbl> 2, 1, 1, 1, 1, 2, 2, 1, 1…\n$ amenities                                    <chr> \"[\\\"Fire extinguisher\\\", …\n$ price                                        <chr> \"$49.00\", \"$106.00\", \"$13…\n$ minimum_nights                               <dbl> 3, 1, 2, 2, 2, 3, 3, 2, 3…\n$ maximum_nights                               <dbl> 28, 365, 356, 1825, 730, …\n$ minimum_minimum_nights                       <dbl> 3, 1, 2, 2, 2, 3, 1, 2, 3…\n$ maximum_minimum_nights                       <dbl> 3, 1, 2, 2, 2, 3, 4, 2, 5…\n$ minimum_maximum_nights                       <dbl> 1125, 1125, 1125, 1825, 7…\n$ maximum_maximum_nights                       <dbl> 1125, 1125, 1125, 1825, 7…\n$ minimum_nights_avg_ntm                       <dbl> 3, 1, 2, 2, 2, 3, 3, 2, 3…\n$ maximum_nights_avg_ntm                       <dbl> 1125.0, 1125.0, 1125.0, 1…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 1, 0, 0, 4, 0, 0, 1, 3, 0…\n$ availability_60                              <dbl> 9, 0, 0, 6, 4, 0, 7, 6, 0…\n$ availability_90                              <dbl> 14, 0, 14, 8, 5, 0, 16, 1…\n$ availability_365                             <dbl> 14, 0, 121, 117, 160, 0, …\n$ calendar_last_scraped                        <date> 2022-09-07, 2022-09-07, …\n$ number_of_reviews                            <dbl> 305, 339, 231, 428, 582, …\n$ number_of_reviews_ltm                        <dbl> 25, 0, 8, 75, 86, 3, 58, …\n$ number_of_reviews_l30d                       <dbl> 1, 0, 0, 5, 7, 2, 1, 4, 0…\n$ first_review                                 <date> 2009-03-30, 2010-03-02, …\n$ last_review                                  <date> 2022-08-30, 2020-04-09, …\n$ review_scores_rating                         <dbl> 4.89, 4.44, 4.94, 4.88, 4…\n$ review_scores_accuracy                       <dbl> 4.94, 4.69, 4.92, 4.94, 4…\n$ review_scores_cleanliness                    <dbl> 5.00, 4.79, 4.95, 4.89, 4…\n$ review_scores_checkin                        <dbl> 4.97, 4.63, 4.95, 4.96, 4…\n$ review_scores_communication                  <dbl> 4.98, 4.62, 4.92, 4.94, 4…\n$ review_scores_location                       <dbl> 4.69, 4.87, 4.89, 4.96, 4…\n$ review_scores_value                          <dbl> 4.82, 4.49, 4.79, 4.83, 4…\n$ license                                      <chr> \"0363 5F3A 5684 6750 D14D…\n$ instant_bookable                             <lgl> TRUE, TRUE, TRUE, FALSE, …\n$ calculated_host_listings_count               <dbl> 1, 2, 1, 2, 2, 1, 1, 1, 1…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1…\n$ calculated_host_listings_count_private_rooms <dbl> 1, 2, 1, 2, 2, 0, 0, 1, 0…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 1.86, 2.22, 1.78, 2.92, 4…\n$ geometry                                     <POINT [m]> POINT (-4434128 106…\n\n\nGeoprocessing with sf package Buffering\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\nPoint-in-polygon count\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nExplorotary Data Analysis (EDA)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\nplot(mpsz3414$`PreSch Density`,mpsz3414$`PreSch Count`,main=\"Pre-school Density VS Pre-school Count\", xlab = \"Density\", ylab =\"Count\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex1/chap02/Hands-on_Ex1_b.html",
    "href": "Hands-on_Exercise/Hands-on_Ex1/chap02/Hands-on_Ex1_b.html",
    "title": "Hands-on Exercise 1:Choropleth Mapping with R",
    "section": "",
    "text": "This is Choropleth Mapping with R.\nGetting Started\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\nImporting Data into R Importing Geospatial Data into R\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\meizhutao\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex1\\chap02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nImporting Attribute Data into R\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nData Preparation Data wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nJoining the attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\nThis warning is displayed once every 8 hours.\nCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")                         \n\nChoropleth Mapping Geospatial Data Using tmap Plotting a choropleth map quickly by using qtm()\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nCreating a choropleth map by using tmap’s elements\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",position = c(\"left\", \"bottom\"))\n\n\n\n\nDrawing a base map\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n\n\n\n\nDrawing a choropleth map using tm_fill() and *tm_border()**\n\ntm_shape(mpsz_pop2020) + tm_fill(\"DEPENDENCY\")\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nData classification methods of tmap Plotting choropleth maps with built-in classification methods The code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nPlotting choropleth map with custome break.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\nColour Scheme Using ColourBrewer palette\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"-Greens\") + tm_borders(alpha = 0.5) \n\n\n\n\nMap Layouts Map Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMap style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\nCartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nDrawing Small Multiple Choropleth Maps. By assigning multiple values to at least one of the aesthetic arguments In this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#the-analytical-question",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#the-analytical-question",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.2.1 The analytical question",
    "text": "4.2.1 The analytical question\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#the-study-area-and-data",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#the-study-area-and-data",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.2.2 The Study Area and Data",
    "text": "4.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format. Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#setting-the-analytical-toolls",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#setting-the-analytical-toolls",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.2.3 Setting the Analytical Toolls",
    "text": "4.2.3 Setting the Analytical Toolls\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in our R.\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#import-shapefile-into-r-environment",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#import-shapefile-into-r-environment",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.3.1 Import shapefile into r environment",
    "text": "4.3.1 Import shapefile into r environment\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\meizhutao\\ISSS624\\Hands-on_Exercise\\Hands-on_Ex2\\chap04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#import-csv-file-into-r-environment",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#import-csv-file-into-r-environment",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.3.2 Import csv file into r environment",
    "text": "4.3.2 Import csv file into r environment\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#performing-relational-join",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#performing-relational-join",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.3.3 Performing relational join",
    "text": "4.3.3 Performing relational join\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#visualising-regional-development-indicator",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#visualising-regional-development-indicator",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.3.4 Visualising Regional Development Indicator",
    "text": "4.3.4 Visualising Regional Development Indicator\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#computing-contiguity-spatial-weights",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4.1 Computing Contiguity Spatial Weights",
    "text": "4.4.1 Computing Contiguity Spatial Weights\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#row-standardised-weights-matrix",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#row-standardised-weights-matrix",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4.2 Row-standardised weights matrix",
    "text": "4.4.2 Row-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#global-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#global-spatial-autocorrelation-morans-i",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4.3 Global Spatial Autocorrelation: Moran’s I",
    "text": "4.4.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, we will learn how to perform Moran’s I statistics testing by using moran.test() of spdep."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#marons-i-test",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#marons-i-test",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4.4 Maron’s I test",
    "text": "4.4.4 Maron’s I test\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n4.4.4.1 Computing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n4.4.4.2 Visualising Monte Carlo Moran’s I\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#global-spatial-autocorrelation-gearys",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#global-spatial-autocorrelation-gearys",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.4.5 Global Spatial Autocorrelation: Geary’s",
    "text": "4.4.5 Global Spatial Autocorrelation: Geary’s\nIn this section, we will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\n4.4.5.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n4.4.5.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n4.4.5.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#compute-morans-i-correlogram",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#compute-morans-i-correlogram",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.5.1 Compute Moran’s I correlogram",
    "text": "4.5.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nIt is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#compute-gearys-c-correlogram-and-plot",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#compute-gearys-c-correlogram-and-plot",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.5.2 Compute Geary’s C correlogram and plot",
    "text": "4.5.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#plotting-moran-scatterplot",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#plotting-moran-scatterplot",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.7.1 Plotting Moran scatterplot",
    "text": "4.7.1 Plotting Moran scatterplot\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#plotting-moran-scatterplot-with-standardised-variable",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#plotting-moran-scatterplot-with-standardised-variable",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.7.2 Plotting Moran scatterplot with standardised variable",
    "text": "4.7.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#preparing-lisa-map-classes",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#preparing-lisa-map-classes",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.7.3 Preparing LISA map classes",
    "text": "4.7.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05       \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4  \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#plotting-lisa-map",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#plotting-lisa-map",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.7.4 Plotting LISA map",
    "text": "4.7.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nThe code chunk below will be used to create such visualisation.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#getis-and-ords-g-statistics",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#getis-and-ords-g-statistics",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.8.1 Getis and Ord’s G-Statistics",
    "text": "4.8.1 Getis and Ord’s G-Statistics\nThe analysis consists of three steps:\nDeriving spatial weight matrix Computing Gi statistics Mapping Gi statistics ## 4.8.2 Deriving distance-based weight matrix First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\nfixed distance weight matrix; and adaptive distance weight matrix. ### 4.8.2.1 Deriving the centroid To get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords <- cbind(longitude, latitude)\n\n\n4.8.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band.\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n4.8.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.8.3 Computing adaptive distance weight matrix",
    "text": "4.8.3 Computing adaptive distance weight matrix\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#gi-statistics-using-fixed-distance",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#gi-statistics-using-fixed-distance",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.9.1 Gi statistics using fixed distance",
    "text": "4.9.1 Gi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#mapping-gi-values-with-fixed-distance-weights",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#mapping-gi-values-with-fixed-distance-weights",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.9.2 Mapping Gi values with fixed distance weights",
    "text": "4.9.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#gi-statistics-using-adaptive-distance",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#gi-statistics-using-adaptive-distance",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.9.3 Gi statistics using adaptive distance",
    "text": "4.9.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "Hands-on_Exercise/Hands-on_Ex2/chap04/Hands-on_Ex2.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "Hands-on_Ex2:Global and Local Measures of Spatial Autocorrelation",
    "section": "4.9.4 Mapping Gi values with adaptive distance weights",
    "text": "4.9.4 Mapping Gi values with adaptive distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute spatial weights using R."
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#getting-the-data-into-r-environment",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#getting-the-data-into-r-environment",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nImport shapefile into r environment\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\meizhutao\\ISSS624\\In-Class_Exercise\\In-class_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#import-csv-file-into-r-environment",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#import-csv-file-into-r-environment",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Import csv file into r environment",
    "text": "Import csv file into r environment\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#performing-relational-join",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#performing-relational-join",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Performing relational join",
    "text": "Performing relational join\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#computing-queen-contiguity-based-neighbours",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#computing-queen-contiguity-based-neighbours",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Computing (QUEEN) contiguity based neighbours",
    "text": "Computing (QUEEN) contiguity based neighbours\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\n\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\n\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#creating-rook-contiguity-based-neighbours",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#creating-rook-contiguity-based-neighbours",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Creating (ROOK) contiguity based neighbours",
    "text": "Creating (ROOK) contiguity based neighbours\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#visualising-contiguity-weights",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#visualising-contiguity-weights",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Visualising contiguity weights",
    "text": "Visualising contiguity weights\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#determine-the-cut-off-distance",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#determine-the-cut-off-distance",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Determine the cut-off distance",
    "text": "Determine the cut-off distance\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#computing-fixed-distance-weight-matrix",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#computing-fixed-distance-weight-matrix",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Computing fixed distance weight matrix",
    "text": "Computing fixed distance weight matrix\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\n\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nPlotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#computing-adaptive-distance-weight-matrix",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#computing-adaptive-distance-weight-matrix",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Computing adaptive distance weight matrix",
    "text": "Computing adaptive distance weight matrix\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nPlotting distance based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#row-standardised-weights-matrix",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#row-standardised-weights-matrix",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Row-standardised weights matrix",
    "text": "Row-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-lag-with-row-standardized-weights",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-lag-with-row-standardized-weights",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Spatial lag with row-standardized weights",
    "text": "Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-lag-as-a-sum-of-neighboring-values",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-lag-as-a-sum-of-neighboring-values",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Spatial lag as a sum of neighboring values",
    "text": "Spatial lag as a sum of neighboring values\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-window-average",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-window-average",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Spatial window average",
    "text": "Spatial window average\nTo begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNow we obtain weights with nb2listw()\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-window-sum",
    "href": "In-Class_Exercise/In-class_Ex01/In-class_Ex01.html#spatial-window-sum",
    "title": "In-class_Ex01: Spatial Weights and Applications",
    "section": "Spatial window sum",
    "text": "Spatial window sum\n\nwm_q1 <- wm_q\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\nLastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#backgroundproblem-statement",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#backgroundproblem-statement",
    "title": "ISSS624",
    "section": "1.1 Background/Problem statement",
    "text": "1.1 Background/Problem statement\nWater is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#packages-used",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#packages-used",
    "title": "ISSS624",
    "section": "3.1 Packages used",
    "text": "3.1 Packages used\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\nsf, tidyverse, tmap, spdep, and funModeling will be used for rapid Exploratory Data Analysis.\nsf is use for importing and handling geospatial data in R tidyverse is mainly use for wrangling attribute data in R\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics\ntmap will be used to prepare cartographic quality chropleth map\nfunModeling will be used for rapid Exploratory Data Analysis.\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#importing-geospatial-data",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#importing-geospatial-data",
    "title": "ISSS624",
    "section": "4.1 Importing Geospatial Data",
    "text": "4.1 Importing Geospatial Data\nIn this in-class data, aspatial and geospatial data sets will be used, they are:\ngeo_export_11f67af6-d430-41fc-b181-fa36b07ee920\ngeoBoundaries-NGA-ADM2\n\n4.1.1 Importing water point geospatial data\nFirst, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.\n\nwp <- st_read(dsn = \"data/aspatial/\",\n               layer = \"geo_export_11f67af6-d430-41fc-b181-fa36b07ee920\")\n\nWe can retrieve the geometry list-column in this case by using st_geometry() as shown in the code chunk below.\n\nst_geometry(wp)\n\nTransform to Projected Coordinate Systems of Nigeria(EPSG: 26391), because we will calculate distance-based spatial weights such as fixed or adaptive weights is used.\n\nwp <- st_as_sf(wp, coords = c(\"lon_deg\", \"lat_deg\"),  crs = 4326)\nst_crs(wp)\n#wp <- st_transform (wp, crs = 26391)\n\n\n\n4.1.2 Importing Nigeria LGA boundary data\nNow, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"data/geospatial\",layer = \"geoBoundaries-NGA-ADM2\") \nst_crs(nga)\n\nTransform to Projected Coordinate Systems of Nigeria(EPSG: 26391), because we will calculate distance-based spatial weights such as fixed or adaptive weights is used.\n\nst_geometry(nga)\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwrite_rds(nga, \"data/geospatial/wp_nga.rds\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "ISSS624",
    "section": "4.2 Data Wrangling",
    "text": "4.2 Data Wrangling\n\n4.2.1 Recoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into Unknown.\n\n\n4.2.2 EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nwp_nga <- wp %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\nfreq(data=wp_nga, \n     input = 'status_cle')"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#extracting-water-point-data",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#extracting-water-point-data",
    "title": "ISSS624",
    "section": "4.3 Extracting Water Point Data",
    "text": "4.3 Extracting Water Point Data\n\n4.3.1 Extracting funtional water point\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n4.3.2 Extracting non-funtional water point\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\n\n\n4.3.3 Extracting water point with Unknown class\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "title": "ISSS624",
    "section": "4.4 Performing Point-in-Polygon Count",
    "text": "4.4 Performing Point-in-Polygon Count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#saving-the-analytical-data-table",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#saving-the-analytical-data-table",
    "title": "ISSS624",
    "section": "4.5 Saving the Analytical Data Table",
    "text": "4.5 Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(1,6:12)\n\nThings to learn from the code chunk above:\nmutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional. to keep the file size small, select() of dplyr is used to retain only field 1, 6 to 12.\nThe following code chunks is to covert NaN to “0”.\n\nnga_wp$pct_functional[is.nan(nga_wp$pct_functiona)]<-0\nnga_wp$`pct_non-functional`[is.nan(nga_wp$`pct_non-functional`)]<-0\n\nNow, we have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.\n\nwrite_rds(nga_wp, \"data/geospatial/nga_wp.rds\")\n\nWe will have two datasets, one is used to analyze functional water points, the other is used to analyze functional water points.\n\nnga_wp <- read_rds(\"data/geospatial/nga_wp.rds\") %>% \n  st_transform(crs = 26391)\nnga_wp_nonfunctional <- read_rds(\"data/geospatial/nga_wp.rds\") %>% \n  st_transform(crs = 26391)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#visualising-regional-development-indicator",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#visualising-regional-development-indicator",
    "title": "ISSS624",
    "section": "5.1 Visualising Regional Development Indicator",
    "text": "5.1 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of functional water point rate by using qtm() of tmap package.\nequal: divides the range of the variable into n parts. quantile: equal number of cases in each group.\nThe following is functional water point rate.\n\nequal <- tm_shape(nga_wp) +\n  tm_fill(\"pct_functional\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(nga_wp) +\n  tm_fill(\"pct_functional\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\nThe following is non-functional point rate.\n\nequal <- tm_shape(nga_wp_nonfunctional) +\n  tm_fill(\"pct_non-functional\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(nga_wp_nonfunctional) +\n  tm_fill(\"pct_non-functional\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\nInsights: quantile is a better classification method because we can see water point rate spreads out rather clustering into one segment. Hence, we will use quantile style in the following analysis."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-water-points",
    "title": "ISSS624",
    "section": "6.1 Visualizing the spatial distribution of water points",
    "text": "6.1 Visualizing the spatial distribution of water points\n\nnga_wp <- read_rds(\"data/geospatial/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")+tm_layout(main.title = \"Distribution of total water points\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.5, \n            legend.width = 0.3,\n            legend.text.size = 0.5,\n            legend.title.size = 0.5,\n            main.title.fontface = \"bold\",\n            frame = TRUE)\nwp_functional <- qtm(nga_wp, \"wpt functional\")+tm_layout(main.title = \"Distribution of functional water points\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.5, \n            legend.width = 0.3,\n            legend.text.size = 0.5,\n            legend.title.size = 0.5,\n            main.title.fontface = \"bold\",\n            frame = TRUE) \nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")+tm_layout(main.title = \"Distribution of non-functional water points\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.5, \n            legend.width = 0.3,\n            legend.text.size = 0.5,\n            legend.title.size = 0.5,\n            main.title.fontface = \"bold\",\n            frame = TRUE) \nunknown <- qtm(nga_wp, \"wpt unknown\")+tm_layout(main.title = \"Distribution of unknown water points\",\n            main.title.position = \"center\",\n            main.title.size = 0.6,\n            legend.height = 0.5, \n            legend.width = 0.3,\n            legend.text.size = 0.5,\n            legend.title.size = 0.5,\n            main.title.fontface = \"bold\",\n            frame = TRUE)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, ncol=2)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-functional-and-non-functional-water-points-rate",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#visualizing-the-spatial-distribution-of-functional-and-non-functional-water-points-rate",
    "title": "ISSS624",
    "section": "6.2 Visualizing the spatial distribution of functional and non-functional water points rate",
    "text": "6.2 Visualizing the spatial distribution of functional and non-functional water points rate\n\nnga_wp <- read_rds(\"data/geospatial/nga_wp.rds\")\npct_functional <- qtm(nga_wp, \"pct_functional\")\npct_nonfunctional <- qtm(nga_wp, \"pct_non-functional\")\ntmap_arrange(pct_functional, pct_nonfunctional, asp=1, ncol=2)\n\n\n\n\nThe areas which has higher functional water point rate is in northern part whereas the higher non-functional water point rate is mainly in southern part and a bit scattered."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-contiguity-spatial-weights",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-contiguity-spatial-weights",
    "title": "ISSS624",
    "section": "7.1 Computing Contiguity Spatial Weights",
    "text": "7.1 Computing Contiguity Spatial Weights\nThe spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. LGA) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on LGA regions with contiguous boundaries.\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q <- poly2nb(nga_wp, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report above shows that there are 774 LGAs in Nigeria. The most connected area unit has 14 neighbours. There is one LGA with zero neighbour.\n\nset.ZeroPolicyOption(TRUE)\n\n[1] FALSE"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#row-standardised-weights-matrix",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#row-standardised-weights-matrix",
    "title": "ISSS624",
    "section": "7.2 Row-standardised weights matrix",
    "text": "7.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring LGA then summing the weighted income values.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation-morans-i",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#global-spatial-autocorrelation-morans-i",
    "title": "ISSS624",
    "section": "7.3 Global Spatial Autocorrelation: Moran’s I",
    "text": "7.3 Global Spatial Autocorrelation: Moran’s I\nIn this section, we will learn how to perform Moran’s I statistics testing by using moran.test() of spdep."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#marons-i-test",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#marons-i-test",
    "title": "ISSS624",
    "section": "7.4 Maron’s I test",
    "text": "7.4 Maron’s I test\n\n7.4.1 Maron’s I test for funtional water points rate\nH0 (Null Hypothesis) - The distribution of functional water point is is a random phenomenon.\nH1 (Alternative Hypothesis) - The distribution of functional water point rate is spatially dependent through calculating the Moran’s I statistic.\n\nmoran.test(nga_wp$`pct_functional`, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$pct_functional  \nweights: rswm_q  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 24.986, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.5426214187     -0.0012953368      0.0004738722 \n\n\nMoran I statistic is positive (0.54), p-value is 2.2e-16, which is less than 0.05, which indicates that we can reject the Null Hypothesis. The spatial distribution of high values in the dataset is more spatially clustered than would be expected if underlying spatial processes were truly random."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-local-morans-i",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-local-morans-i",
    "title": "ISSS624",
    "section": "7.5 Computing local Moran’s I",
    "text": "7.5 Computing local Moran’s I\nThe code chunks below are used to compute local Moran’s I of functional water points at the region level.\n\nfips <- order(nga_wp$shapeName)\nlocalMI_functional <- localmoran(nga_wp$`pct_functional`, rswm_q)\nhead(localMI_functional)\n\n           Ii          E.Ii     Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.41018362 -1.654345e-04 0.03188191  2.2981654   0.0215523774\n2  0.44339949 -2.255204e-04 0.05802043  1.8417283   0.0655148997\n3  4.23819606 -5.482789e-03 1.40315932  3.5825233   0.0003402913\n4 -0.06581869 -1.984964e-04 0.02177313 -0.4447101   0.6565292424\n5  0.08100201 -2.019191e-05 0.00310945  1.4529889   0.1462268280\n6  0.49501574 -4.914108e-04 0.05388720  2.1345538   0.0327974744\n\n\nlocalmoran() function returns a matrix of values whose columns are:\nIi: the local Moran’s I statistics E.Ii: the expectation of local moran statistic under the randomisation hypothesis Var.Ii: the variance of local moran statistic under the randomisation hypothesis Z.Ii:the standard deviate of local moran statistic Pr(): the p-value of local moran statistic\n\n7.5.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto nga_wp SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called nga.localMI.\n\nnga.localMI_functional <- cbind(nga_wp,localMI_functional) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n7.5.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(nga.localMI_functional) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"funcational local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nMoran’s I positive (I >0): Clusters of functional water point rate are at northeast. The dark blue is highly clustered.\n\n\n7.5.3 Mapping local Moran’s I p-values\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package. The following code chunks are for functional water points rate.\n\ntm_shape(nga.localMI_functional) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"functional local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nInsights: p-value <0.05 is statistically significant.The lower p-value, the higher significance.\n\n\n7.5.4 Mapping both local Moran’s I values and p-values\nThe code chunk below will be used to create such visualization. The following code chunks are for functional water points rate.\n\nlocalMI.map_functional <- tm_shape(nga.localMI_functional) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"functional local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map_functional <- tm_shape(nga.localMI_functional) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"functional local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map_functional, pvalue.map_functional, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nLocal Moran’s I values is positive (I >0), and p-values is less than 0.05: Clustered, The spatial distribution of high values of functional water point rate in the dataset of of high values and/or low values are more spatially clustered, there are about 4 clusters."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot",
    "title": "ISSS624",
    "section": "8.1 Plotting Moran scatterplot",
    "text": "8.1 Plotting Moran scatterplot\nThe code chunk below plots the Moran scatterplot of functional water points by using moran.plot() of spdep.\n\nnci <- moran.plot(nga_wp$`pct_functional`, rswm_q,\n                  labels=as.character(nga_wp$shapeName), \n                  xlab=\"Functional waterpoints rate\", \n                  ylab=\"Spatially Lag functional waterpoints rate\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high functional water points rate and are surrounded by other areas that have the average level of functional water points rate. The left bottom corner belongs to areas that have low functional water points rate and are surrounded by other areas that have the average level of functional water points rate."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot-with-standardised-variable",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot-with-standardised-variable",
    "title": "ISSS624",
    "section": "8.2 Plotting Moran scatterplot with standardised variable",
    "text": "8.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable.\n\nnga_wp$Z.func <- scale(nga_wp$`pct_functional`) %>% \n  as.vector \n\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(nga_wp$Z.func, rswm_q,\n                   labels=as.character(nga_wp$shapeName),\n                   xlab=\"z functional points rate\", \n                   ylab=\"Spatially Lag functional points rate\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high functional water points rate and are surrounded by other areas that have the average level of functional water points rate. The left bottom corner belongs to areas that have low functional water points rate and are surrounded by other areas that have the average level of functional water points rate."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#preparing-lisa-map-classes",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#preparing-lisa-map-classes",
    "title": "ISSS624",
    "section": "8.3 Preparing LISA map classes:",
    "text": "8.3 Preparing LISA map classes:\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant_functional <- vector(mode=\"numeric\",length=nrow(localMI_functional))\n\nNext, derives the spatially lagged variable of interest and centers the spatially lagged variable around its mean.\n\nnga_wp$lag_func_points <- lag.listw(rswm_q, nga_wp$`pct_functional`)\nDV_functional <- nga_wp$lag_func_points - mean(nga_wp$lag_func_points) \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_functional <- localMI_functional[,1] - mean(localMI_functional[,1])   \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05  \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant_functional[DV_functional <0 & LM_I_functional>0] <- 1\nquadrant_functional[DV_functional >0 & LM_I_functional<0] <- 2\nquadrant_functional[DV_functional <0 & LM_I_functional<0] <- 3  \nquadrant_functional[DV_functional >0 & LM_I_functional>0] <- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant_functional[localMI_functional[,5]>signif] <- 0"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-lisa-map",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-lisa-map",
    "title": "ISSS624",
    "section": "8.4 Plotting LISA MAP:",
    "text": "8.4 Plotting LISA MAP:\nAn outlier: significant and negative if location i is associated with relatively low values in surrounding locations. A cluster: significant and positive if location is associated with relatively high values of the surrounding locations.\n\nnga.localMI_functional$quadrant_functional <- quadrant_functional\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga.localMI_functional) +\n  tm_fill(col = \"quadrant_functional\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_functional)))+1], \n          labels = clusters[c(sort(unique(quadrant_functional)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nDark blue areas are clusters of (Low-low) water point rate. Red areas are clusters of (High-high) water point rate. Orange and light blue are outliers.\n\ntmap_arrange(localMI.map_functional, pvalue.map_functional, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nLocal Moran’s I values is positive (I >0), and p-values is less than 0.05: Clustered, The spatial distribution of high values of functional water point rate in the dataset is more spatially clustered, there are about 4 clusters. This matches the analysis of LISA MAP cluster analysis.\n\nfunc <- qtm(nga_wp, \"pct_functional\")\n\nnga.localMI_functional$quadrant_functional <- quadrant_functional\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_functional <- tm_shape(nga.localMI_functional) +\n  tm_fill(col = \"quadrant_functional\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_functional)))+1], \n          labels = clusters[c(sort(unique(quadrant_functional)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(func, LISAmap_functional, \n             asp=1, ncol=2)\n\n\n\n\nThe pct_functional map shows: red is highest functional water point rate. the yellow is the lightest water point rate. The quadrant_functional shows:dark blue area are clusters of (Low-low) water point rate.red area are clusters of (High-high) water point rate. Orange and light blue are outliers. The insights drawn from two maps match each other."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#getis-and-ords-g-statistics",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#getis-and-ords-g-statistics",
    "title": "ISSS624",
    "section": "9.1 Getis and Ord’s G-Statistics",
    "text": "9.1 Getis and Ord’s G-Statistics\nThe analysis consists of three steps:\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#deriving-distance-based-weight-matrix",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#deriving-distance-based-weight-matrix",
    "title": "ISSS624",
    "section": "9.2 Deriving distance-based weight matrix",
    "text": "9.2 Deriving distance-based weight matrix\nThere are two type of distance-based proximity matrix, they are:\nfixed distance weight matrix; and adaptive distance weight matrix.\nDeriving the centroid To get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid. We do the same for latitude with one key difference. We access the second value per each centroid with [[2]]. Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n9.2.1 Determine the cut-off distance\n\n#coords <- coordinates(Nigeria)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = FALSE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 72.139 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n9.2.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d73000 <- dnearneigh(coords, 0, 73000, longlat = FALSE)\nwm_d73000\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18486 \nPercentage nonzero weights: 3.085752 \nAverage number of links: 23.88372 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm73000_lw <- nb2listw(wm_d73000, style = 'B')\nsummary(wm73000_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18486 \nPercentage nonzero weights: 3.085752 \nAverage number of links: 23.88372 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 4  9 11 17 35 35 29 28 34 38 28 20 17 27 12 17  7 13 13 13 24  5 12 12  5 15 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  8 10 12 17  7  5 13  8  8 10 13 17 14  6  9  3  3  3  8  8 11  7  6  2  6 \n53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 72 \n 2  1  4  4  8  3  3  6  2  7  4  8  7  4  1  3  1 \n4 least connected regions:\n90 112 237 670 with 1 link\n1 most connected region:\n585 with 72 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 774 599076 18486 36972 2719848\n\n\nThe output spatial weights object is called wm73000_lw."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-adaptive-distance-weight-matrix",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-adaptive-distance-weight-matrix",
    "title": "ISSS624",
    "section": "9.3 Computing adaptive distance weight matrix",
    "text": "9.3 Computing adaptive distance weight matrix\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 with 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11154 201940"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics-with-fixed-distance",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics-with-fixed-distance",
    "title": "ISSS624",
    "section": "10.1 Computing GI statistics with fixed distance",
    "text": "10.1 Computing GI statistics with fixed distance\n\nfips <- order(nga_wp$shapeName)\ngi.fixed <- localG(nga_wp$`pct_functional`, wm73000_lw)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-fixed-distance-with-weights",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-fixed-distance-with-weights",
    "title": "ISSS624",
    "section": "10.2 Mapping fixed distance with weights",
    "text": "10.2 Mapping fixed distance with weights\n\nfunc <- qtm(nga_wp, \"pct_functional\")\n\nGimap <-tm_shape(nga_wp.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(func, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFunctional water point rates are associated with relatively high values of the surrounding locations (clustered- hotspot areas), the Gi value 5-10. Gi low values (-10 to -5) indicated cold spots."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#gi-statistics-using-adaptive-distance",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#gi-statistics-using-adaptive-distance",
    "title": "ISSS624",
    "section": "10.3 Gi statistics using adaptive distance",
    "text": "10.3 Gi statistics using adaptive distance\n\nfips <- order(nga_wp$shapeName)\ngi.adaptive <- localG(nga_wp$`pct_functional`, knn_lw)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-gi-values-with-adaptive-distance-weight",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-gi-values-with-adaptive-distance-weight",
    "title": "ISSS624",
    "section": "10.4 Mapping Gi values with adaptive distance weight",
    "text": "10.4 Mapping Gi values with adaptive distance weight\n\nfunc <- qtm(nga_wp, \"pct_functional\")\n\nGimap_functional <- tm_shape(nga_wp.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(func, \n             Gimap_functional, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFunctional water point rates are associated with relatively high values of the surrounding locations (clustered- hotspot areas), the Gi value 2 to 4, 4 to 6. Gi low values (-6 to -4,-4 to -2) indicated cold spots."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-contiguity-spatial-weights-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-contiguity-spatial-weights-1",
    "title": "ISSS624",
    "section": "11. 1 Computing Contiguity Spatial Weights",
    "text": "11. 1 Computing Contiguity Spatial Weights\nThe spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. LGA) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on LGA regions with contiguous boundaries.\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q_non_functional <- poly2nb(nga_wp_nonfunctional, \n                queen=TRUE)\nsummary(wm_q_non_functional)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report above shows that there are 774 LGAs in Nigeria. The most connected area unit has 14 neighbours. There is one LGA with zero neighbour.\n\nset.ZeroPolicyOption(TRUE)\n\n[1] TRUE"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#row-standardised-weights-matrix-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#row-standardised-weights-matrix-1",
    "title": "ISSS624",
    "section": "11.2 Row-standardised weights matrix",
    "text": "11.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring LGA then summing the weighted income values.\n\nrswm_q_non_functional <- nb2listw(wm_q_non_functional, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q_non_functional\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n11.2.1 Maron’s I test for non-funtional water points rate\nH0 (Null Hypothesis) - The distribution of non-functional water point is is a random phenomenon.\nH1 (Alternative Hypothesis) - The distribution of non-functional water point rate is spatially dependent through calculating the Moran’s I statistic.\n\nmoran.test(nga_wp_nonfunctional$`pct_non-functional`, \n           listw=rswm_q_non_functional, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp_nonfunctional$`pct_non-functional`  \nweights: rswm_q_non_functional  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 22.285, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.4837570240     -0.0012953368      0.0004737621 \n\n\nMoran I statistic is positive (0.48), p-value is 2.2e-16,which is less then 0.001, which indicates that we can reject the Null Hypothesis. The spatial distribution of high values in the dataset is more spatially clustered than would be expected if underlying spatial processes were truly random."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-local-morans-i-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-local-morans-i-1",
    "title": "ISSS624",
    "section": "11.3 Computing local Moran’s I",
    "text": "11.3 Computing local Moran’s I\nThe code chunks below are used to compute local Moran’s I of non-functional water points at the region level.\n\nfips <- order(nga_wp_nonfunctional$shapeName)\nlocalMI_non_functional <- localmoran(nga_wp_nonfunctional$`pct_non-functional`, rswm_q_non_functional)\nhead(localMI_non_functional)\n\n         Ii          E.Ii     Var.Ii     Z.Ii Pr(z != E(Ii))\n1 0.7205030 -0.0008462949 0.16298365 1.786790    0.073971380\n2 0.5252722 -0.0006367969 0.16376361 1.299577    0.193746096\n3 2.9136576 -0.0037692854 0.96630021 2.967864    0.002998774\n4 0.2526888 -0.0016448047 0.18015811 0.599207    0.549034825\n5 1.1677063 -0.0008713700 0.13407224 3.191451    0.001415602\n6 0.5116138 -0.0008830323 0.09679375 1.647280    0.099500421\n\n\nlocalmoran() function returns a matrix of values whose columns are:\nIi: the local Moran’s I statistics E.Ii: the expectation of local moran statistic under the randomisation hypothesis Var.Ii: the variance of local moran statistic under the randomisation hypothesis Z.Ii:the standard deviate of local moran statistic Pr(): the p-value of local moran statistic\n\n11.3.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto nga_wp SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called nga.localMI.\nNow, let’s calculate nga.localMI for non-functional water points rate.\n\nnga.localMI_non_functional <- cbind(nga_wp_nonfunctional,localMI_non_functional) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n11.3.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\ntm_shape(nga.localMI_non_functional) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"non-funcational local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n11.3.4 Mapping local Moran’s I p-values\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package. The following code chunks are for non-functional water points rate.\n\ntm_shape(nga.localMI_non_functional) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"non-functional local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n11.3.5 Mapping both local Moran’s I values and p-values\nThe code chunk below will be used to create such visualization. The following code chunks are for non-functional water points rate.\n\nlocalMI.map_non_functional <- tm_shape(nga.localMI_non_functional) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"non-functional local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map_non_functional <- tm_shape(nga.localMI_non_functional) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"non-functional local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map_non_functional, pvalue.map_non_functional, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nLocal Moran’s I values is positive (I>0), and p-values is less than 0.05: Clustered, The spatial distribution of high values of functional water point rate in the dataset is more spatially clustered."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot-1",
    "title": "ISSS624",
    "section": "12.1 Plotting Moran scatterplot",
    "text": "12.1 Plotting Moran scatterplot\nThe code chunk below plots the Moran scatterplot of non-functional water points by using moran.plot() of spdep.\n\nnci <- moran.plot(nga_wp_nonfunctional$`pct_non-functional`, rswm_q,\n                  labels=as.character(nga_wp_nonfunctional$shapeName), \n                  xlab=\"Non-Functional waterpoints rate\", \n                  ylab=\"Spatially Lag non-functional waterpoints rate\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high non-functional water points rate and are surrounded by other areas that have the average level of functional water points rate. The left bottom corner belongs to areas that have low non-functional water points rate and are surrounded by other areas that have the average level of functional water points rate."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot-with-standardised-variable-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-moran-scatterplot-with-standardised-variable-1",
    "title": "ISSS624",
    "section": "12.2 Plotting Moran scatterplot with standardised variable",
    "text": "12.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable.\n\nnga_wp_nonfunctional$Z.nonfunc <- scale(nga_wp$`pct_non-functional`) %>% \n  as.vector \n\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 <- moran.plot(nga_wp_nonfunctional$Z.nonfunc, rswm_q,\n                   labels=as.character(nga_wp_nonfunctional$shapeName),\n                   xlab=\"z non-functional points rate\", \n                   ylab=\"Spatially Lag non-functional points rate\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#preparing-lisa-map-classes-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#preparing-lisa-map-classes-1",
    "title": "ISSS624",
    "section": "12.3 Preparing LISA map classes",
    "text": "12.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant_non_functional <- vector(mode=\"numeric\",length=nrow(localMI_non_functional))\n\nNext, derives the spatially lagged variable of interest and centers the spatially lagged variable around its mean.\n\nnga_wp_nonfunctional$lag_non_func_points <- lag.listw(rswm_q, nga_wp_nonfunctional$`pct_non-functional`)\nDV_non_functional <- nga_wp_nonfunctional$lag_non_func_points - mean(nga_wp_nonfunctional$lag_non_func_points) \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I_non_functional <- localMI_non_functional[,1] - mean(localMI_non_functional[,1])   \n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif <- 0.05  \n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant_non_functional[DV_non_functional <0 & LM_I_non_functional>0] <- 1\nquadrant_non_functional[DV_non_functional >0 & LM_I_non_functional<0] <- 2\nquadrant_non_functional[DV_non_functional <0 & LM_I_non_functional<0] <- 3  \nquadrant_non_functional[DV_non_functional >0 & LM_I_non_functional>0] <- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant_non_functional[localMI_non_functional[,5]>signif] <- 0"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-lisa-map-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#plotting-lisa-map-1",
    "title": "ISSS624",
    "section": "12.4 Plotting LISA MAP:",
    "text": "12.4 Plotting LISA MAP:\n\nnga.localMI_non_functional$quadrant_non_functional <- quadrant_non_functional\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(nga.localMI_non_functional) +\n  tm_fill(col = \"quadrant_non_functional\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_non_functional)))+1], \n          labels = clusters[c(sort(unique(quadrant_non_functional)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\nnonfunc <- qtm(nga_wp_nonfunctional, \"pct_non-functional\")\n\nnga.localMI_non_functional$quadrant_non_functional <- quadrant_non_functional\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap_non_functional <- tm_shape(nga.localMI_non_functional) +\n  tm_fill(col = \"quadrant_non_functional\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant_non_functional)))+1], \n          labels = clusters[c(sort(unique(quadrant_non_functional)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(nonfunc, LISAmap_non_functional, \n             asp=1, ncol=2)\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\ntmap_arrange(localMI.map_non_functional, pvalue.map_non_functional, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nThe pct_functional map shows: red is highest non-functional water point rate. the yellow is the lightest water point rate. The quadrant_functional shows:dark blue area are clusters of (Low-low) water point rate.red area are clusters of (High-high) water point rate. Orange and light blue are outliers. The insights drawn from two maps match each other."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#getis-and-ords-g-statistics-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#getis-and-ords-g-statistics-1",
    "title": "ISSS624",
    "section": "12.5 Getis and Ord’s G-Statistics",
    "text": "12.5 Getis and Ord’s G-Statistics\nThe analysis consists of three steps:\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#deriving-distance-based-weight-matrix-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#deriving-distance-based-weight-matrix-1",
    "title": "ISSS624",
    "section": "12.6 Deriving distance-based weight matrix",
    "text": "12.6 Deriving distance-based weight matrix\nThere are two type of distance-based proximity matrix, they are:\nfixed distance weight matrix; and adaptive distance weight matrix.\nDeriving the centroid To get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid. We do the same for latitude with one key difference. We access the second value per each centroid with [[2]]. Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\nlongitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n12.6.1 Determine the cut-off distance\n\n#coords <- coordinates(Nigeria)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = FALSE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2669   12834   20304   22084   27783   72139 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 72319 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n12.6.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d73000 <- dnearneigh(coords, 0, 73000, longlat = FALSE)\nwm_d73000\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18486 \nPercentage nonzero weights: 3.085752 \nAverage number of links: 23.88372 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d73000, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18486 \nPercentage nonzero weights: 3.085752 \nAverage number of links: 23.88372 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 4  9 11 17 35 35 29 28 34 38 28 20 17 27 12 17  7 13 13 13 24  5 12 12  5 15 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n12  8 10 12 17  7  5 13  8  8 10 13 17 14  6  9  3  3  3  8  8 11  7  6  2  6 \n53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 72 \n 2  1  4  4  8  3  3  6  2  7  4  8  7  4  1  3  1 \n4 least connected regions:\n90 112 237 670 with 1 link\n1 most connected region:\n585 with 72 links\n\nWeights style: B \nWeights constants summary:\n    n     nn    S0    S1      S2\nB 774 599076 18486 36972 2719848\n\n\nThe output spatial weights object is called wm73000_lw."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-adaptive-distance-weight-matrix-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-adaptive-distance-weight-matrix-1",
    "title": "ISSS624",
    "section": "12.7 Computing adaptive distance weight matrix",
    "text": "12.7 Computing adaptive distance weight matrix\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11154 201940"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics-with-fixed-distance-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#computing-gi-statistics-with-fixed-distance-1",
    "title": "ISSS624",
    "section": "13.1 Computing GI statistics with fixed distance",
    "text": "13.1 Computing GI statistics with fixed distance\n\nfips <- order(nga_wp_nonfunctional$shapeName)\ngi.fixed <- localG(nga_wp_nonfunctional$`pct_non-functional`, wm73000_lw)\nnga_wp_nonfunctional.gi <- cbind(nga_wp_nonfunctional, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nNext, we will join the Gi values to their corresponding nga_wp data frame by using the code chunk below. Functional:\n\nnga_wp_nonfunctional.gi <- cbind(nga_wp_nonfunctional, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-fixed-distance-with-weights-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-fixed-distance-with-weights-1",
    "title": "ISSS624",
    "section": "13.2 Mapping fixed distance with weights",
    "text": "13.2 Mapping fixed distance with weights\n\nnonfunc <- qtm(nga_wp_nonfunctional, \"pct_non-functional\")\n\nGimap_non_functional <-tm_shape(nga_wp_nonfunctional.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nonfunc, Gimap_non_functional, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nNon-unctional water point rates are associated with relatively high values of the surrounding locations (clustered- hotspot areas), the Gi value 4 to 6, 6 to 8, 8 to 10. Gi low values (-6 to -4, -4 to -2) indicated cold spots."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#gi-statistics-using-adaptive-distance-1",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#gi-statistics-using-adaptive-distance-1",
    "title": "ISSS624",
    "section": "13.3 Gi statistics using adaptive distance",
    "text": "13.3 Gi statistics using adaptive distance\n\nfips <- order(nga_wp_nonfunctional$shapeName)\ngi.adaptive <- localG(nga_wp_nonfunctional$`pct_non-functional`, knn_lw)\nnga_wp_nonfunctional.gi <- cbind(nga_wp_nonfunctional, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-gi-values-with-adaptive-distance-weights",
    "href": "Take-home Exercise/Take-home_Ex1/Take-home_Ex1.html#mapping-gi-values-with-adaptive-distance-weights",
    "title": "ISSS624",
    "section": "13.4 Mapping Gi values with adaptive distance weights",
    "text": "13.4 Mapping Gi values with adaptive distance weights\n\nnonfunc <- qtm(nga_wp_nonfunctional, \"pct_non-functional\")\n\nGimap_non_functional <- tm_shape(nga_wp_nonfunctional.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nonfunc, \n             Gimap_non_functional, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nNon-unctional water point rates are associated with relatively high values of the surrounding locations (clustered- hotspot areas), the Gi value 2 to 4, 4 to 6. Gi low values (-6 to -4, -4 to -2) indicated cold spots."
  }
]