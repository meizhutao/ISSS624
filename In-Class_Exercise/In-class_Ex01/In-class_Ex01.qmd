---
title: "In-class_Ex01: Spatial Weights and Applications"
editor: visual
---

# Overview

In this hands-on exercise, we will learn how to compute spatial weights using R.

# Getting Started

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in your R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## Getting the Data Into R Environment
Import shapefile into r environment
```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## Import csv file into r environment
```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Performing relational join
```{r}
hunan <- left_join(hunan,hunan2012)
```

# Visualising Regional Development Indicator
```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Computing Contiguity Spatial Weights
## Computing (QUEEN) contiguity based neighbours
### The code chunk below is used to compute Queen contiguity weight matrix.
```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

### For each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:
```{r}
wm_q[[1]]
```

### We can retrive the county name of Polygon ID=1 by using the code chunk below:
```{r}
hunan$County[1]
```

### To reveal the county names of the five neighboring polygons, the code chunk will be used:
```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

### We can retrieve the GDPPC of these five countries by using the code chunk below.
```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

### You can display the complete weight matrix by using str().
```{r}
str(wm_q)
```

## Creating (ROOK) contiguity based neighbours
### The code chunk below is used to compute Rook contiguity weight matrix.
```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

## Visualising contiguity weights
```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
head(coords)
```

### Plotting Queen contiguity based neighbours map
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plotting Rook contiguity based neighbours map
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting both Queen and Rook contiguity based neighbours maps
```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

# Computing distance based neighbours
## Determine the cut-off distance
```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

## Computing fixed distance weight matrix
### Now, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.
```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

### Next, we will use str() to display the content of wm_d62 weight matrix.
```{r}
str(wm_d62)
```

### Another way to display the structure of the weight matrix is to combine table() and card() of spdep.
```{r}
table(hunan$County, card(wm_d62))
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
table(n_comp$comp.id)
```

### Plotting fixed distance weight matrix
Next, we will plot the distance weight matrix by using the code chunk below.
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

Alternatively, we can plot both of them next to each other by using the code chunk below.
```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

## Computing adaptive distance weight matrix
It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.
```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, we can display the content of the matrix by using str().
```{r}
str(knn6)
```

### Plotting distance based neighbours
```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Weights based on IDW
First, we will compute the distances between areas by using nbdists() of spdep.
```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardised weights matrix
```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
rswm_q$weights[10]
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
rswm_ids$weights[1]
summary(unlist(rswm_ids$weights))
```

# Application of Spatial Weight Matrix
## Spatial lag with row-standardized weights
Finally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.
```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Finally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.
```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.
```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.
```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Spatial lag as a sum of neighboring values
We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.
```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.
```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

Next, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.
```{r}
hunan <- left_join(hunan, lag.res)
```

Now, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.
```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Spatial window average
To begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.
```{r}
wm_q1 <- wm_q
```

To add the diagonal element to the neighbour list, we just need to use include.self() from spdep.
```{r}
include.self(wm_q1)
```

Now we obtain weights with nb2listw()
```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.
```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using as.data.frame().
```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Next, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.
```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Lastly, qtm() of tmap package is used to plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison.
```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## Spatial window sum
```{r}
wm_q1 <- wm_q
```

To add the diagonal element to the neighbour list, we just need to use include.self() from spdep.
```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.
```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Again, we use nb2listw() and glist() to explicitly assign weight values.
```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with lag.listw().
```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using as.data.frame().
```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Next, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.
```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Lastly, qtm() of tmap package is used to plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison.
```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```